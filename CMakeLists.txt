cmake_minimum_required(VERSION 3.13)

# Make sure 'set' for variables is respected by options in nested files
set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# set the module path
list(PREPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMakeBuild")

include(get_version)

project(
    Lute
    VERSION ${LUTE_VERSION}
    LANGUAGES CXX C
)

# luau setup
set(LUAU_BUILD_CLI OFF)
set(LUAU_BUILD_TESTS OFF)

add_subdirectory(extern/luau)

# libuv setup
set(LIBUV_BUILD_SHARED OFF)
set(BUILD_SHARED_LIBS OFF) # why does an option for LIBUV_BUILD_SHARED exist separately
set(LIBUV_BUILD_TESTS OFF)
set(LIBUV_BUILD_BENCH OFF)
add_subdirectory(extern/libuv)

# Define libuv include directory here, before it's needed by other subdirectories
set(LIBUV_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/extern/libuv/include)

if(NOT LUTE_DISABLE_NET)
	# zlib setup
	#
	set(ZLIB_BUILD_EXAMPLES OFF CACHE BOOL "Do not build examples" FORCE)
	set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build static zlib" FORCE)
	add_subdirectory(extern/zlib)

	set(ZLIB_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/extern/zlib")

	set(ZLIB_FOUND TRUE CACHE BOOL "" FORCE)

	if(MSVC)
    		if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        		set(ZLIB_LIBRARY "${ZLIB_OUTPUT_DIR}/zlibstaticd.lib")
    		else()
        		set(ZLIB_LIBRARY "${ZLIB_OUTPUT_DIR}/zlibstatic.lib")
    		endif()
	else()
    		set(ZLIB_LIBRARY "${ZLIB_OUTPUT_DIR}/libz.a")
	endif()
	set(ZLIB_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/extern/zlib;${ZLIB_OUTPUT_DIR})
	set(ZLIB_INCLUDE_DIRS ${ZLIB_INCLUDE_DIR} CACHE STRING "" FORCE)
endif()

set(BUILD_SHARED_LIBS OFF)
set(BUILD_STATIC_LIBS ON)

if(NOT LUTE_DISABLE_NET OR NOT LUTE_DISABLE_CRYPTO)
	# boringssl setup
	add_subdirectory(extern/boringssl)
	set(BORINGSSL_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/extern/boringssl")
	set(BORINGSSL_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/extern/boringssl/include)
endif()
if(NOT LUTE_DISABLE_NET)
	# curl setup

	set(USE_LIBIDN2 OFF)
	set(USE_NGHTTP2 OFF)
	set(CURL_USE_LIBPSL OFF)
	set(CURL_USE_LIBSSH2 OFF)
	set(CURL_ZLIB ON)
	set(CURL_BROTLI OFF CACHE STRING "Disable brotli support" FORCE)
	set(CURL_ENABLE_SSL ON)
	set(CURL_USE_OPENSSL ON)
	set(BUILD_EXAMPLES OFF)
	set(BUILD_CURL_EXE OFF)

	set(HAVE_BORINGSSL ON)
	add_subdirectory(extern/curl)

	# uWebSockets setup
	set(WITH_BORINGSSL ON)
	set(WITH_LIBUV ON)
	set(WITH_ZLIB ON)

	# Set the correct libuv library name for uWebSockets
	set(LIBUV_LIBRARY uv_a)
	include(uSockets)
	include(uWebSockets)

	# Define include directories for uWebSockets and uSockets
	set(UWEBSOCKETS_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/extern/uWebSockets/src)
endif()

# libsodium for `pwhash`
if(NOT LUTE_DISABLE_CRYPTO)
	include(libsodium)
endif()

# Lute
set(LUTE_OPTIONS)

if(MSVC)
    list(APPEND LUTE_OPTIONS /DNOMINMAX)
    list(APPEND LUTE_OPTIONS /D_CRT_SECURE_NO_WARNINGS) # We need to use the portable CRT functions.
    list(APPEND LUTE_OPTIONS "/we4018") # Signed/unsigned mismatch
    list(APPEND LUTE_OPTIONS "/we4388") # Also signed/unsigned mismatch
    list(APPEND LUTE_OPTIONS "/Zc:externConstexpr") # MSVC does not comply with C++ standard by default
    # FIXME: list(APPEND LUTE_OPTIONS /WX) # Warnings are errors
else()
    list(APPEND LUTE_OPTIONS -Wall) # All warnings
    list(APPEND LUTE_OPTIONS -Wimplicit-fallthrough)
    list(APPEND LUTE_OPTIONS -Wsign-compare) # This looks to be included in -Wall for GCC but not clang
    list(APPEND LUTE_OPTIONS -Werror) # Warnings are errors
endif()

if(LUTE_DISABLE_CRYPTO)
    list(APPEND LUTE_OPTIONS -DLUTE_DISABLE_CRYPTO)
endif()

if(LUTE_DISABLE_NET)
    list(APPEND LUTE_OPTIONS -DLUTE_DISABLE_NET)
endif()

# libraries
add_subdirectory(lute/require)
add_subdirectory(lute/runtime)
if(NOT LUTE_DISABLE_CRYPTO)
	add_subdirectory(lute/crypto)
endif()
add_subdirectory(lute/fs)
add_subdirectory(lute/luau)

if(NOT LUTE_DISABLE_NET)
	add_subdirectory(lute/net)
endif()
add_subdirectory(lute/std)
add_subdirectory(lute/task)
add_subdirectory(lute/vm)
add_subdirectory(lute/process)
add_subdirectory(lute/system)
add_subdirectory(lute/time)

# executables
add_subdirectory(lute/cli)
